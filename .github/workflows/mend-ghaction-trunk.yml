name: Mend UA MultiOrg Scan

on:
  push:
     branches:
     - v10/contrib
     - v9/contrib
     - v8/dev
     - dev
     - '**feature/**'
     - '**bugfix/**'

env:
  WS_WSS_URL: https://saas.mend.io/agent
  WS_URL: https://saas.mend.io
  WS_PRODUCTNAME: ${{github.event.repository.name}}_${{github.ref_name}}
  WS_PROJECTPERFOLDER: true
  WS_GENERATEPROJECTDETAILSJSON: true

jobs:
  mendscan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Build DotNET projects
      run: dotnet build umbraco.sln --configuration Release
    - name: Set keys if triggered by production branches
      if: github.ref_name == 'v10/contrib' ||
        github.ref_name == 'v9/contrib' ||
        github.ref_name == 'v8/dev' ||
        github.ref_name == 'dev'
      run: |
        echo WS_APIKEY=${{secrets.PROD_APIKEY}} >> $GITHUB_ENV
        echo WS_USERKEY=${{secrets.PROD_USERKEY}} >> $GITHUB_ENV
    - name: Set keys if triggered by development branches
      if: contains(github.ref_name, 'feature') ||
        contains(github.ref_name, 'bugfix')
      run: |
        echo WS_APIKEY=${{secrets.DEV_APIKEY}} >> $GITHUB_ENV
        echo WS_USERKEY=${{secrets.DEV_USERKEY}} >> $GITHUB_ENV
    - name: Lookup Product based on repo and rename to _DELETE
      run: |
        WS_PRODUCTTOKEN=$(curl -X POST "${WS_URL}/api/v1.3" -H "Content-Type: application/json" \
        -d '{ "requestType" : "getAllProducts",   "userKey" : "'${WS_USERKEY}'",  "orgToken": "'${WS_APIKEY}'"}' | \
        jq -r --arg WS_PRODUCTNAME ${WS_PRODUCTNAME} '.products[] | select(.productName==$WS_PRODUCTNAME) | .productToken')
        echo "getting productToken=${WS_PRODUCTTOKEN} from productName=${WS_PRODUCTNAME}"
        curl -X POST "${WS_URL}/api/v1.3" -H "Content-Type: application/json" \
        -d '{ "requestType" : "renameProduct", "userKey" : "'${WS_USERKEY}'", "productToken" : "'${WS_PRODUCTTOKEN}'", "newProductName": "'${WS_PRODUCTNAME}'_DELETE"}'
        echo DELETE_PRODUCTTOKEN=$WS_PRODUCTTOKEN >> $GITHUB_ENV
    - name: Mend Unified Agent Scan
      run: |
        curl -LJO https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar
        echo Unified Agent downloaded successfully
        java -jar wss-unified-agent.jar -d ./src
    - name: Tag Product with Commit
      run: |
        WS_PRODUCTTOKEN=$(curl -X POST "${WS_URL}/api/v1.3" -H "Content-Type: application/json" \
        -d '{ "requestType" : "getAllProducts",   "userKey" : "'${WS_USERKEY}'",  "orgToken": "'${WS_APIKEY}'"}' | \
        jq -r --arg WS_PRODUCTNAME ${WS_PRODUCTNAME} '.products[] | select(.productName==$WS_PRODUCTNAME) | .productToken')
        echo "getting productToken=${WS_PRODUCTTOKEN} from productName=${WS_PRODUCTNAME}"
        curl -X POST "${WS_URL}/api/v1.3" -H "Content-Type: application/json" \
        -d '{ "requestType":"saveProductTag", "userKey":"'${WS_USERKEY}'", "productToken":"'${WS_PRODUCTTOKEN}'", "tagkey":"CommitHash", "tagValue":"'${{github.sha}}'" }'
#    - name: Ignore Alerts Tool
#      run: |
#        pip install ws-ignore-alerts
#        IGNORETOKEN=$(curl -X POST "${WS_URL}/api/v1.3" -H "Content-Type: application/json" \
#        -d '{ "requestType" : "getAllProjects",   "userKey" : "'${WS_USERKEY}'",  "productToken": "'{$DELETE_PRODUCTOKEN}'"}' | \
#        jq -r --arg '.products[] | select(.projectName=="projectnametoignorealerts") | .projectToken')
#        python ws_ignore_alerts.py -u $WS_URL -k $WS_USERKEY -o $WS_APIKEY -p $DELETE_PRODUCTTOKEN -b $IGNORETOKEN -n $destProjectName
    - name: Delete Original Product
      run: | 
        curl -X POST "${WS_URL}/api/v1.3" -H "Content-Type: application/json" \
        -d '{ "requestType":"deleteProduct", "userKey":"'${WS_USERKEY}'", "orgToken":"'${WS_APIKEY}'", "productToken":"'${DELETE_PRODUCTTOKEN}'"}'
    - name: 'Upload WhiteSource folder'
      uses: actions/upload-artifact@v2
      with:
        name: WhiteSource
        path: whitesource
        retention-days: 1
    - name: 'Upload WhiteSource folder if failure'
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: WhiteSource
        path: whitesource
        retention-days: 1
